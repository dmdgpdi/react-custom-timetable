{
  "compilerOptions": {
    "target": "es6", // JavaScript의 타겟 버전을 ES6로 설정 (ECMAScript 2015). 최신 문법을 사용할 수 있으며 ES6 이상의 기능이 포함됩니다.
    "module": "ESNext", // 모듈 시스템을 ESNext로 설정. ES 모듈 시스템을 사용하며 최신 모듈 구문을 지원합니다.
    "jsx": "react-jsx", // JSX를 React 17의 새로운 JSX 변환 방식으로 컴파일. JSX 구문을 `_jsx` 함수로 변환합니다.
    "moduleResolution": "Bundler", // 모듈 해석 방식을 번들러에 맞게 설정 (e.g., Webpack). Node.js 스타일의 모듈 해석이 아닌 번들러용 해석 방식을 사용합니다.
    "lib": ["es5", "es6", "dom", "ES2017", "ES2020"], // 프로젝트에서 사용하는 라이브러리의 ECMAScript와 DOM 표준을 포함. ECMAScript 2017 기능과 DOM 타입을 지원합니다.
    "declaration": true, // 타입스크립트가 자동으로 타입 정의 파일 (.d.ts)을 생성합니다.
    "declarationDir": "dist",
    "declarationMap": true, // 타입 정의 파일에 대한 맵 파일 (.d.ts.map)을 생성합니다. 디버깅 시 타입 정의와 소스 코드 간의 매핑을 제공합니다.
    "outDir": "dist", // 컴파일된 JavaScript 파일을 저장할 디렉토리입니다. 이 설정은 `dist` 폴더를 지정합니다.
    "strict": true,
    "forceConsistentCasingInFileNames": true, // 파일 이름의 대소문자가 일관되도록 강제합니다. 파일 시스템이 대소문자를 구별하지 않는 경우에도 일관성을 유지합니다.
    "allowSyntheticDefaultImports": true, // default export가 없는 모듈에서도 default import를 허용합니다. CommonJS 모듈과 호환성을 높입니다.
    "skipLibCheck": false, // 라이브러리 파일에 대한 타입 검사를 건너뛰지 않습니다. 라이브러리 타입 검사도 수행하여 모든 타입 오류를 검출합니다.
    "resolveJsonModule": true, // JSON 파일을 모듈로 가져올 수 있도록 허용합니다. JSON 파일을 TypeScript 모듈처럼 임포트할 수 있습니다.
    "allowImportingTsExtensions": true, // `.ts` 또는 `.tsx` 파일을 import 할 수 있도록 허용합니다. 이 옵션은 TypeScript 파일을 직접 import 할 때 유용합니다.
    "isolatedModules": true, // 각 파일을 독립적으로 모듈로 취급합니다. 모든 파일이 독립적인 모듈로 처리되도록 설정합니다.
    "noUnusedLocals": true, // 사용하지 않는 지역 변수를 허용하지 않습니다. 코드의 품질을 유지하기 위해 불필요한 변수를 제거합니다.
    "noUnusedParameters": true, // 사용하지 않는 함수 매개변수를 허용하지 않습니다. 코드에서 불필요한 매개변수를 제거합니다.
    "noFallthroughCasesInSwitch": true, // switch 문에서 케이스 문이 fall-through(모든 case가 실행되는 것)를 방지합니다. 오류를 방지합니다.
    "composite": true, // 컴파일러가 다른 프로젝트에 의해 참조될 수 있도록 합니다. 프로젝트의 컴파일을 독립적으로 구성할 수 있습니다.
    "emitDeclarationOnly": true
  },
  "include": ["./src"],
  "exclude": ["./node_modules", "**/*test*"]
}
